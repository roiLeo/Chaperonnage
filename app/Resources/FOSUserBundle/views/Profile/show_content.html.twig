{% trans_default_domain 'FOSUserBundle' %}
<div class="profileClass container">

    <ul class="nav nav-tabs text-center" role="tablist">
        <li class="nav-item col-md-3">
            <a class="nav-link active" href="#profile" role="tab" data-toggle="tab">Profil</a>
        </li>
        <li class="nav-item col-md-3">
            <a class="nav-link" href="#address" role="tab" data-toggle="tab">Mes adresses</a>
        </li>
        <li class="nav-item col-md-3">
            <a class="nav-link" href="#friends" role="tab" data-toggle="tab">Mes amis</a>
        </li>
        <li class="nav-item col-md-3">
            <a class="nav-link" href="#rides" role="tab" data-toggle="tab">Mes trajets</a>
        </li>
    </ul>

<!-- Tab panes -->
    <div class="tab-content">
        <div role="tabpanel" class="tab-pane fade in active show" id="profile">
            {% for type, flash_messages in app.session.flashBag.all %}
                {% for flash_message in flash_messages %}
                    <div class="alert alert-dismissible alert-{{ type }}" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        {{ flash_message }}
                    </div>
                {% endfor %}
            {% endfor %}
            <div class="container alignItemCenter">
                <div class="col-md-3">
                    <img class="rounded-circle img-responsive rounded-image" src="{{ asset(get_avatar(app.user)) }}"  alt="photo de profil" height="232" width="232">

                </div><div class="col-md-9 noPaddingRight">
                    <div class="card">
                        <!--Card content-->
                        <div class="card-block">
                            <a class="btnEditProfil" href="{{ path('fos_user_profile_edit') }}" aria-label="Settings">
                                <i class="fa fa-pencil" aria-hidden="true"></i>
                            </a>
                            <!--Title-->
                            <h4 class="card-title">Informations</h4>
                            <!--Text-->
                            {##}

                            <p class="card-text"><i class="fa fa-bar-chart" aria-hidden="true"></i>{{ get_niveauCop(app.user) }} </p>
                            <p class="card-text"><i class="fa fa-users" aria-hidden="true"></i>{{ get_nbCop(app.user) }} Copiétonnage(s)</p>
                            <p class="card-text"><i class="fa fa-star" aria-hidden="true"></i><i class="fa fa-star" aria-hidden="true"></i><i class="fa fa-star" aria-hidden="true"></i><i class="fa fa-star" aria-hidden="true"></i><i class="fa fa-star-o" aria-hidden="true"></i> </p>
                        </div>
                        <!--/.Card content-->
                    </div>
                </div>

            </div>

            <div class="container text-center marginTop15">
                <div class="col-md-3">
                    <p>{{ app.user.name | capitalize }} {{ app.user.surname | capitalize}} | <span class="greyaaa">{{ get_age(app.user) }} ans</span></p>
                </div>
                <div class="col-md-9">
                </div>
            </div>

            <div class="container alignItemTop">
                <div class="col-md-3">
                    <div class="card">
                        <!--Card content-->
                        <div class="card-block">
                            <!--Title-->
                            <h4 class="card-title">Vérifications</h4>
                            <!--Text-->
                            {##}
                            {% if get_phone(app.user) == 'true'  %}
                                <p class="card-text greenValid"><i class="fa fa-check-square-o" aria-hidden="true"></i>Téléphone vérifié </p>
                            {% else %}
                                <p class="card-text redNonValid"><i class="fa fa-square-o" aria-hidden="true"></i>Téléphone non vérifié </p>
                            {% endif %}

                            {% if get_pictureVerified(app.user) == 'true'  %}
                                <p class="card-text greenValid"><i class="fa fa-check-square-o" aria-hidden="true"></i>Avatar vérifié </p>
                            {% else %}
                                <p class="card-text redNonValid"><i class="fa fa-square-o" aria-hidden="true"></i>Avatar non vérifié </p>
                            {% endif %}

                            {% if get_credentialVerified(app.user) == 'true' %}
                                <p class="card-text greenValid"><i class="fa fa-check-square-o" aria-hidden="true"></i>Pièce d'identité vérifié </p>
                            {% else %}
                                <p class="card-text redNonValid"><i class="fa fa-square-o" aria-hidden="true"></i><a href="{{ path('edit_credential') }}" class="redNonValid underline">Ajouter une pièce d'identité </a> </p>
                            {% endif %}

                        </div>
                        <!--/.Card content-->
                    </div>
                </div>
                {#app.user.birthday | date("m/d/Y")#}
                <div class="col-md-9 noPaddingRight">
                    <div class="card">
                        <!--Card content-->
                        <div class="card-block">
                            <a class="btnEditProfil" href="{{ path('fos_user_profile_edit') }}" aria-label="Settings">
                                <i class="fa fa-pencil" aria-hidden="true"></i>
                            </a>
                            <!--Title-->
                            <h4 class="card-title">Description</h4>
                            <!--Text-->
                            {##}

                            <p class="card-text"> {{ app.user.description }} </p>
                        </div>
                        <!--/.Card content-->
                    </div>
                </div>
            </div>

        </div>
        <div role="tabpanel" class="tab-pane fade" id="address">
            {{ render(controller('AppBundle:Address:list')) }}
        </div>
        <div role="tabpanel" class="tab-pane fade" id="friends">
            {% if app.user.facebookId %}
            <div class="card">
                    <div class="card-block">
                        <h4 class="card-title">Amis Facebook</h4>
                            <p class="card-text">
                                Vous avez un total de {{ app.user.totalCountFacebookFriends }} amis sur Facebook.
                            </p>
                    </div>
            </div>
            <div class="card ">
                    <div class="card-block">
                        <h4 class="card-title">Amis utilisant Mon Chaperon</h4>
                        {% for user in app.user.facebookFriendsList %}
                            <div class="d-flex align-content-center flex-wrap friend-block">
                                <div class="p-2">
                                    <img class="rounded-circle img-responsive navatar" src="{{ asset(get_avatar(user))}}">
                                </div>
                               <div class="p-2">
                                   {{ user.name | capitalize }} {{ user.surname | capitalize}}  {{ get_age(user) }} ans -
                                   {{ user.description }}
                               </div>
                            </div>
                        {% else %}
                            Aucun de vos amis Facebook n'utilise Mon Chaperon.
                        {% endfor %}
                    </div>
            </div>
            {% else %}
                        <div class="card-block">
                            <h4 class="card-title">Vous n'êtes pas connecté avec Facebook.</h4>
                            <div class="text-center">
                                <a href="#" onclick="fb_login();" class="btn btn-block btn-social btn-facebook"> <span class="fa fa-facebook"></span>Me connecter
                                    à Facebook
                                </a>
                                <div class="mt-2 mb-2 hr">OR</div>
                            </div>
                        </div>
            {% endif %}
            </div>

        <div role="tabpanel" class="tab-pane fade" id="rides">vvv</div>
    </div>
    <script>
        // This example displays an address form, using the autocomplete feature
        // of the Google Places API to help users fill in the information.

        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        var placeSearch, autocomplete;
        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            country: 'long_name',
            postal_code: 'short_name'
        };
        var inputsAddressForm = {
            street : 'app_address_type_street',
            postal_code: 'app_address_type_postalCode',
            city: 'app_address_type_city',
            country: 'app_address_type_country',
            longitude: 'app_address_type_longitude',
            lattitude: 'app_address_type_lattitude',
        };

        function initAutocomplete() {

            // Create the autocomplete object, restricting the search to geographical
            // location types.
            autocomplete = new google.maps.places.Autocomplete(
                /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
                {types: ['geocode']});

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
        }

        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();

            resetAddressForm();
            fillInInputs(place);
        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }
        function resetAddressForm(){
            for(var current in inputsAddressForm)
            {
                console.log(inputsAddressForm[current]);
                console.log(document.getElementById(inputsAddressForm[current]));
                //document.getElementById(inputsAddressForm[current]).value = '';
            }
            setInactiveLabels();
        }
        function fillInInputs(place)
        {
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    switch(addressType)
                    {
                        case 'street_number':
                            document.getElementById(inputsAddressForm['street']).value +=
                                place.address_components[i][componentForm['street_number']] + " ";
                            setActiveLabel(inputsAddressForm['street']);
                        break;
                        case 'route':
                            document.getElementById(inputsAddressForm['street']).value +=
                                place.address_components[i][componentForm['route']];
                            setActiveLabel(inputsAddressForm['street']);
                        break;
                        case 'locality':
                            document.getElementById(inputsAddressForm['city']).value =
                                place.address_components[i][componentForm['locality']];
                            setActiveLabel(inputsAddressForm['city']);
                        break;
                        case 'country':
                            document.getElementById(inputsAddressForm['country']).value =
                                place.address_components[i][componentForm['country']];
                            setActiveLabel(inputsAddressForm['country']);
                        break;
                        case 'postal_code':
                            document.getElementById(inputsAddressForm['postal_code']).value =
                                place.address_components[i][componentForm['postal_code']];
                            setActiveLabel(inputsAddressForm['postal_code']);
                        break;
                    }
                }
            }
            document.getElementById(inputsAddressForm['lattitude']).value = place.geometry.location.lat();
            document.getElementById(inputsAddressForm['longitude']).value = place.geometry.location.lng();
        }
        function setActiveLabel(id){
                if(('app_address_longitude' != id) && (('app_address_lattitude' != id))){
                    $("label[for='"+id+"']").addClass('active');
                }
        }
        function setInactiveLabels(){
            for(var current in inputsAddressForm){
                if(('app_address_longitude' != inputsAddressForm[current]) && (('app_address_lattitude' != inputsAddressForm[current]))){
                    $("label[for='"+inputsAddressForm[current]+"']").removeClass('active');
                }
            }
        }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC-TozRWtnMZroNu6HOGostbH4RVwIhLj4&libraries=places&callback=initAutocomplete"
            async defer></script>
</div>